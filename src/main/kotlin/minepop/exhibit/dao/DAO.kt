package minepop.exhibit.dao

import java.io.Closeable
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement
import java.sql.SQLException
import java.util.concurrent.ArrayBlockingQueue

abstract class DAO {

    protected fun connect(): ConnectionWrapper {
        val c = connectionPool.take()
        return if (c.isValid())
            c
        else {
            c.closeConnection()
            ConnectionWrapper(connect0())
        }
    }

    class ConnectionWrapper(private val connection: Connection) : Closeable {

        fun prepareStatement(sql: String): PreparedStatement {
            return connection.prepareStatement(sql)
        }

        fun prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement {
            return connection.prepareStatement(sql, autoGeneratedKeys)
        }

        fun isValid(): Boolean {
            return connection.isValid(5)
        }

        override fun close() {
            connectionPool.offer(this)
        }

        fun closeConnection() {
            try {
                connection.close()
            } catch (t: Throwable) {
                // ignore
            }
        }
    }

    companion object {

        private val conf = DAOConfig()
        private val connectionPool = ArrayBlockingQueue<ConnectionWrapper>(conf.getConnectionPool())

        init {
            for (i in 0 until conf.getConnectionPool())
                connectionPool.offer(ConnectionWrapper(connect0()))
            Runtime.getRuntime().addShutdownHook(Thread {
                connectionPool.forEach {
                    it.closeConnection()
                }
            })
        }

        private fun connect0(): Connection {
            val connectionString = "jdbc:mysql://${conf.getHost()}:${conf.getPort()}/${conf.getSchema()}"
            return DriverManager.getConnection(connectionString, conf.getUser(), conf.getPasswd())
        }
    }
}
