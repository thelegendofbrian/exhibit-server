package minepop.exhibit.dao

import java.io.Closeable
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement
import java.sql.SQLException
import java.util.concurrent.ArrayBlockingQueue

abstract class DAO {

    @Throws(SQLException::class)
    protected fun connect(): ConnectionWrapper {
        try {
            return connectionPool.take()
        } catch (ex: InterruptedException) {
            throw SQLException(ex)
        }
    }

    class ConnectionWrapper(private val connection: Connection) : Closeable {

        @Throws(SQLException::class)
        fun prepareStatement(sql: String): PreparedStatement {
            return connection.prepareStatement(sql)
        }

        @Throws(SQLException::class)
        fun prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement {
            return connection.prepareStatement(sql, autoGeneratedKeys)
        }

        override fun close() {
            connectionPool.offer(this)
        }
    }

    companion object {

        private val conf = DAOConfig()
        private val connectionPool = ArrayBlockingQueue<ConnectionWrapper>(conf.getConnectionPool())

        init {
            try {
                for (i in 0 until conf.getConnectionPool())
                    connectionPool.offer(
                        ConnectionWrapper(
                            connect0()
                        )
                    )
            } catch (ex: SQLException) {
                throw RuntimeException(ex)
            }
        }

        @Throws(SQLException::class)
        private fun connect0(): Connection {
            val connectionString =
                String.format("jdbc:mysql://%s:%d/%s", conf.getHost(), conf.getPort(), conf.getSchema())
            return DriverManager.getConnection(connectionString, conf.getUser(), conf.getPasswd())
        }
    }
}
